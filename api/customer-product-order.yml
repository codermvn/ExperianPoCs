openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/self7648/Order-Customer-Product/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/self7648/Order-Customer/1.0.0
info:
  description: Order-Customer-Product
  version: "1.0.0"
  title: Order-Customer-Product-API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    
tags:
  - name: customers
    description: Operations for add update or delete customers
  - name: orders
    description: Operations for add update or delete customer orders
  - name: products
    description: Operations for add update or delete products  
paths:
  /createOrder:
    post:
      tags:
        - orders
      summary: create Order
      description: |
        create Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputOrder'
          application/xml:
              schema:
                $ref: '#/components/schemas/InputOrder'      
        description: Order to add  
      responses:
        '200':
          description: order added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'    
  /getOrder/{orderId}:
    get:
      tags:
        - orders
      summary: get order By orderId
      description: |
        you can get order by orderId
        
      # Path Param
      parameters:
      -  name: orderId
         in: path
         required: true
         schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: search order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /deleteOrder/{orderId}:
    delete:
      tags:
        - orders
      summary: delete Order By orderId
      description: |
        you can delete order by orderId
        
      # Path Param
      parameters:
      -  name: orderId
         in: path
         required: true
         schema:
            type: integer
      responses:
        '200':
          description: delete order has failed status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: search order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /createCustomer:
    post:
      tags:
        - customers
      summary: create customer
      description: |
        create customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputCustomer'
          application/xml:
              schema:
                $ref: '#/components/schemas/InputCustomer'    
        description: Customer to add  
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '409':
          description: Customer already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /getCustomer/{customerId}:
    get:
      tags:
        - customers
      summary: get customer By customerId
      description: |
        you can get customer by customerId
        
      # Path Param
      parameters:
      -  name: customerId
         in: path
         required: true
         schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: search customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /debit:
    post:
      tags:
        - customers
      summary: debit amount
      description: |
        debit amount
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/CustomerAmount'
          application/xml:
              schema:
                $ref: '#/components/schemas/CustomerAmount'      
        description: amount to be debited  
      responses:
        '200':
          description: amount debited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: Customer could not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '408':
          description: available debit is less than debit requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /credit:
    post:
      tags:
        - customers
      summary: credit amount
      description: |
        credit amount
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/CustomerAmount'
          application/xml:
              schema:
                $ref: '#/components/schemas/CustomerAmount'  
        description: amount to be credited  
      responses:
        '200':
          description: amount credited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: Customer could not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '409':
          description: incase someone sends negative amount
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse' 
                
  /addProduct:
    post:
      tags:
        - products
      summary: add product
      description: |
        add product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputProduct'
          application/xml:
              schema:
                $ref: '#/components/schemas/InputProduct'    
        description: product to add  
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
        '409':
          description: Product already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
  /getProduct/{productId}:
    get:
      tags:
        - products
      summary: get product By productId
      description: |
        you can get product by productId
        
      # Path Param
      parameters:
      -  name: productId
         in: path
         required: true
         schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: search customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'              
components:
  schemas:
    Product:
      type: object
      required:
        - productId
        - productName
        - productPrice
        - company
        - inventory
      properties:
        productId:
          type: integer
        productName:
          type: string
          example: Shirt
        productPrice:
          type: number
        company:
          type: string  
        inventory:
          type: integer
    InputProduct:
      type: object
      required:
        - productName
        - productPrice
        - company
        - inventory
      properties:
        productId:
          type: integer
        productName:
          type: string
        productPrice:
          type: number
        company:
          type: string  
        inventory:
          type: integer
      
    InputCustomer:
      properties:
        customerName:
          type: string
        modeOfPayment:
          type: string
        debitAvailable:
          type: number
        customerAddress:
          type: string      
    Customer:
      properties:
        customerId:
          type: integer
        customerName:
          type: string
        modeOfPayment:
          type: string
        debitAvailable:
          type: number
        customerAddress:
          type: string
        status:
          type: string
          enum:
                - active
                - inactive
                - blocked
    InputOrder:
      type: object
      required:
        - customerId
      properties:
        customerId:
          type: integer  
        orderProducts:
          type: array
          items:
            $ref: '#/components/schemas/InputOrderProduct'
    Order:
      type: object
      properties:
        orderId:
          type: integer
        customer:
          $ref: '#/components/schemas/Customer' 
        orderProducts:
          type: array
          items:
            $ref: '#/components/schemas/OrderProduct'
        orderValue:
          type: number
        ordStatus:
          type: string
          enum:
                - success
                - failed
                - pending 
    InputOrderProduct:
      type: object
      properties:
        productId:
          type: integer
        quantity:
          type: integer
    OrderProduct:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
        date:  
          type: string
          description: Start date
          example: "2017-01-01"
          format: date
    CustomerAmount:
      type: object
      properties:
        customerId:
          type: integer
        value:
          type: number
    ExceptionResponse:
      properties:
        errorMessage:
          type: string
        requestedURI:
          type: string
        reason:
          type: string
        errorCode:
          type: integer
